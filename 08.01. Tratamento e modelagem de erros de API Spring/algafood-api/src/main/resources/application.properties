#URL de conexao com o Banco de dados
spring.datasource.url=jdbc:mysql://localhost:3306/algafood?createDatabaseIfNotExist=true&serverTimezone=UTC

#Nome de usuario e senha do DB
spring.datasource.username=root
spring.datasource.password=root

#------------------Comentado para usar o Flyway----------------------------
#Configurando o JPA para criar as tabelas automaticamente no banco de dados
#spring.jpa.generated-ddl=true
#Dropa todas as tabelas e recria sempre que a aplicacao iniciar
#spring.jpa.hibernate.ddl-auto=create
#Atualizar o Schema
#spring.jpa.hibernate.ddl-auto=update
#--------------------------------------------------------------------------

#Printar o SQL gerado no console
spring.jpa.show-sql=true

#Motor de armazenamento de banco de dados do MySQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect

#------------------------------------------------------------------------------------------------

#Configurando o numero maxido conexao do Hikari
#Hikari é um dos pools de conexões mais populares e eficientes usados em aplicações Java (É o pool padrão)
#Um pool de conexões é um conjunto de conexões de banco de dados mantidas na memória que podem ser reutilizadas em vez de criar e destruir conexões toda vez que um cliente faz uma solicitação ao banco. Isso melhora o desempenho e reduz a sobrecarga.
#spring.datasource.hikari.maximum-pool-size=3
#spring.datasource.hikari.minimum-idle=3
#spring.datasource.hikari.idle-timeout=10000

#------------------------------------------------------------------------------------------------

#Essa configuração indica que o JPA deve gerar scripts SQL para criar o esquema do banco de dados (tabelas, constraints, etc.) com base nas entidades definidas no código Java.
spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create

#Onde será criado o arquivo com os scripts -> o arquivo chamado ddl.sql dentro de resources
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl.sql

#------------------------------------------------------------------------------------------------
#Especifica em qual localização a gente quer que o Flyway encontere os scripts de migração e callBack
spring.flyway.locations=classpath:db/migration,classpath:db/testdata